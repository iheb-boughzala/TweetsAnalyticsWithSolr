# Specify server locations in a SOLR_LOCATOR variable; used later in variable substitutions:
SOLR_LOCATOR : {
  # Natschemae of solr collection
  collection : tweet_Collection1
  # ZooKeeper ensemble
  zkHost : "127.0.0.1:2181/solr"
  # The maximum number of documents to send to Solr per network batch (throughput knob)
  # batchSize : 100
}
# Specify an array of one or more morphlines, each of which defines an ETL 
# transformation chain. A morphline consists of one or more (potentially 
# nested) commands. A morphline is a way to consume records (e.g. Flume events, 
# HDFS files or blocks), turn them into a stream of records, and pipe the stream 
# of records through a set of easily configurable transformations on it's way to 
# Solr.
morphlines : [
  {
    # Name used to identify a morphline. E.g. used if there are multiple morphlines in a 
    # morphline config file
    id : morphline1 
    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this morphline.
    importCommands : ["org.kitesdk.**", "org.apache.solr.**" , "com.cloudera.**"]  
    commands : [                    
         { readJson: {} 
	 }

	{ extractJsonPaths {
         # flatten : true # to transform arrays in real arrays (not a String representation)
          paths : {
	id : /id
	coordinates_s :"/coordinates"
	place_s :/place
	text_t :/text
	screenName_s :/user/name
	language_s : /lang
	created_at :"/created_at"
	tag_ss :"/entities/hashtags"
	favorite_count :"/favorite_count"
	retweet_count :"/retweet_count"
  	geo_s :/geo
          }
        }
      }
	# Consume the output record of the previous command and pipe another
	# record downstream.
	# convert timestamp field to native Solr timestamp format
{
       convertTimestamp {
          field : created_at
          inputFormats :["EEE MMM d HH:mm:ss '+'SSSS yyyy"]
          inputTimezone : America/Los_Angeles
          outputFormat : "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
	       
 outputTimezone : UTC
	}
	}
         {
        sanitizeUnknownSolrFields {
          # Location from which to fetch Solr schema
          solrLocator : ${SOLR_LOCATOR}
           renameToPrefix : "ignored_"
        }
      }           
      # log the record at DEBUG level to SLF4J
      { logDebug { format : "output record: {}", args : ["@{}"] } }    
      # load the record into a Solr server or MapReduce Reducer.
      { 
        loadSolr {
          solrLocator : ${SOLR_LOCATOR}
        }
      }
    ]
  }
]

